#include <ESP8266WiFi.h>
#include <WiFiClient.h>
#include <ESP8266WebServer.h>
#include <OneWire.h>
#include <DallasTemperature.h>
#include <time.h>

#define temPin 2

OneWire oneWire(temPin); 

DallasTemperature sensors(&oneWire);

const char* ssid = "Noooode";
const char* password = "wasdafsfwasfa21241";

ESP8266WebServer server(80);

void indexHTML() {    
  server.send(200, "text/html", 
  "<!DOCTYPE html>\
  <html>\
  <head>\
  <title>Temperaturanzeige</title>\
  <meta http-equiv='content-type' content='text/html'; charset='utf-8'>\
  <style>\
  body { background-color: #585858; font-size: 50px; font-family: Arial, Helvetica, Sans-Serif; color: #F2F2F2; margin-left: 40px; }\
  h1 { color: #2ECCFA; margin-top: 50px; margin-bottom: 0px; }\
  h2 { font-size: 20px; margin-top: 0px; margin-bottom: 50px; }\
  #temp { width: 230px; height: 80px; border: 5px solid #F2F2F2; text-align:center; padding: 1px; color: #9AFE2E; background-color: #000000; font-size: 60px; }\
  </style>\
  </head>\
  <body>\
  <h1>Temperaturanzeige</h1>\
  <table><tr><td>Aktuelle Temperatur:&nbsp;</td>\
  <td id='temp'><span id='TempWert'>-</span>°C</td></tr></table>\
  <script>\
  setInterval(function() {\
    getData();\
  }, 1000);\
  function getData() {\
    var xhttp = new XMLHttpRequest();\
    xhttp.onreadystatechange = function() {\
      if (this.readyState == 4 && this.status == 200) {\
        document.getElementById('TempWert').innerHTML = this.responseText;\
      }\
    };\
    xhttp.open('GET', 'TempWeb', true);\
    xhttp.send();\
  }\
  </script>\
  </body>\
  </html>\
  ");
}

void TempMessung() {
  sensors.requestTemperatures();
  String TempWert_1 = String(sensors.getTempCByIndex(0),1);
  //String TempWert_2 = String(4.4,1);
 // String TempWert_3 = String(4.6,1);
//  String TempWert_4 = String(4.7,1);
    server.send(200, "text/plane", TempWert_1);


}

void setup(void){
  sensors.begin();
  Serial.begin(9600);
  WiFi.disconnect();
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  Serial.println("");

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.print("Verbunden mit ");
  Serial.println(ssid);
  Serial.print("IP Adresse: ");
  Serial.println(WiFi.localIP());
 
  server.on("/", indexHTML);
  server.on("/TempWeb", TempMessung);

  server.begin(); 
  Serial.println("Webserver ist gestartet");
  Serial.println(localTime);
}

const uint32_t SYNC_INTERVAL = 12;                             

struct tm tm;

const char* const PROGMEM NTP_SERVER[] = {"fritz.box", "de.pool.ntp.org", "at.pool.ntp.org", "ch.pool.ntp.org", "ptbtime1.ptb.de", "europe.pool.ntp.org"};
const char* const PROGMEM DAY_NAMES[] = {"Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"};
const char* const PROGMEM DAY_SHORT[] = {"So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"};
const char* const PROGMEM MONTH_NAMES[] = {"Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember"};
const char* const PROGMEM MONTH_SHORT[] = {"Jan", "Feb", "Mrz", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez"};

void setupTime() {      
  configTime("CET-1CEST,M3.5.0,M10.5.0/3", NTP_SERVER[1]);      
  server.on("/time", []() {
    server.send(200, "application/json", localTime());
  });
}

uint32_t sntp_update_delay_MS_rfc_not_less_than_15000() {       
  return SYNC_INTERVAL * 36e5;                                  
}

String localTime() {
  static char buf[26];                                          
  static time_t previous;
  time_t now = time(&now);
  if (now != previous) {
    previous = now;
    localtime_r(&now, &tm);
      Serial.println(MONTH_NAMES[tm.tm_mon]);                   

    
    strftime (buf, sizeof(buf), R"(["%T","%d.%m.%Y"])", &tm);   
  }
  return buf;
}

void loop(void){
  server.handleClient();
}
